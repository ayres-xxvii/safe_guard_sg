Output generated on: 2025-04-27 14:41:25
Fold 0:
Model: LogisticRegression(max_iter=1000, random_state=88)
Train Accuracy Score: 0.98
Train Recall Score: 0.8275862068965517
Train Confusion Matrix:
[[270   1]
 [  5  24]]

Test Accuracy Score: 0.9733333333333334
Test Recall Score: 0.75
Test Confusion Matrix:
[[67  0]
 [ 2  6]]
------------------------------
Model: RandomForestClassifier(class_weight='balanced', n_estimators=80,
                       random_state=88)
Train Accuracy Score: 0.9833333333333333
Train Recall Score: 1.0
Train Confusion Matrix:
[[266   5]
 [  0  29]]

Test Accuracy Score: 0.9333333333333333
Test Recall Score: 0.625
Test Confusion Matrix:
[[65  2]
 [ 3  5]]
------------------------------
Model: RandomForestClassifier(class_weight='balanced', n_estimators=50,
                       random_state=88)
Train Accuracy Score: 0.99
Train Recall Score: 0.9655172413793104
Train Confusion Matrix:
[[269   2]
 [  1  28]]

Test Accuracy Score: 0.9333333333333333
Test Recall Score: 0.625
Test Confusion Matrix:
[[65  2]
 [ 3  5]]
------------------------------
Model: RandomForestClassifier(class_weight='balanced', n_estimators=30,
                       random_state=88)
Train Accuracy Score: 0.9833333333333333
Train Recall Score: 1.0
Train Confusion Matrix:
[[266   5]
 [  0  29]]

Test Accuracy Score: 0.9333333333333333
Test Recall Score: 0.625
Test Confusion Matrix:
[[65  2]
 [ 3  5]]
------------------------------
Model: RandomForestClassifier(class_weight='balanced', n_estimators=20,
                       random_state=88)
Train Accuracy Score: 0.9833333333333333
Train Recall Score: 1.0
Train Confusion Matrix:
[[266   5]
 [  0  29]]

Test Accuracy Score: 0.9333333333333333
Test Recall Score: 0.625
Test Confusion Matrix:
[[65  2]
 [ 3  5]]
------------------------------
Model: RandomForestClassifier(class_weight='balanced', n_estimators=15,
                       random_state=88)
Train Accuracy Score: 0.9833333333333333
Train Recall Score: 1.0
Train Confusion Matrix:
[[266   5]
 [  0  29]]

Test Accuracy Score: 0.9333333333333333
Test Recall Score: 0.625
Test Confusion Matrix:
[[65  2]
 [ 3  5]]
------------------------------
Model: SVC(class_weight='balanced', probability=True, random_state=88)
Train Accuracy Score: 0.98
Train Recall Score: 0.8620689655172413
Train Confusion Matrix:
[[269   2]
 [  4  25]]

Test Accuracy Score: 0.9733333333333334
Test Recall Score: 0.75
Test Confusion Matrix:
[[67  0]
 [ 2  6]]
------------------------------
Model: GradientBoostingClassifier(n_estimators=20, random_state=88)
Train Accuracy Score: 0.9866666666666667
Train Recall Score: 0.8620689655172413
Train Confusion Matrix:
[[271   0]
 [  4  25]]

Test Accuracy Score: 0.9466666666666667
Test Recall Score: 0.5
Test Confusion Matrix:
[[67  0]
 [ 4  4]]
------------------------------
Model: GradientBoostingClassifier(n_estimators=15, random_state=88)
Train Accuracy Score: 0.9866666666666667
Train Recall Score: 0.8620689655172413
Train Confusion Matrix:
[[271   0]
 [  4  25]]

Test Accuracy Score: 0.9466666666666667
Test Recall Score: 0.5
Test Confusion Matrix:
[[67  0]
 [ 4  4]]
------------------------------
Model: MultinomialNB()
Train Accuracy Score: 0.9633333333333334
Train Recall Score: 0.8275862068965517
Train Confusion Matrix:
[[265   6]
 [  5  24]]

Test Accuracy Score: 0.9733333333333334
Test Recall Score: 0.875
Test Confusion Matrix:
[[66  1]
 [ 1  7]]
------------------------------
Model: KNeighborsClassifier()
Train Accuracy Score: 0.98
Train Recall Score: 0.8275862068965517
Train Confusion Matrix:
[[270   1]
 [  5  24]]

Test Accuracy Score: 0.96
Test Recall Score: 0.625
Test Confusion Matrix:
[[67  0]
 [ 3  5]]
------------------------------
NEXT FOLD 


Summary of Models Test results (Average Metrics):
Model: LogisticRegression(max_iter=1000, random_state=88)
Average Accuracy: 0.9733333333333334
Average Recall: 0.75
Average Confusion Matrix:
[[67.  0.]
 [ 2.  6.]]
------------------------------
Model: RandomForestClassifier(class_weight='balanced', n_estimators=80,
                       random_state=88)
Average Accuracy: 0.9333333333333333
Average Recall: 0.625
Average Confusion Matrix:
[[65.  2.]
 [ 3.  5.]]
------------------------------
Model: RandomForestClassifier(class_weight='balanced', n_estimators=50,
                       random_state=88)
Average Accuracy: 0.9333333333333333
Average Recall: 0.625
Average Confusion Matrix:
[[65.  2.]
 [ 3.  5.]]
------------------------------
Model: RandomForestClassifier(class_weight='balanced', n_estimators=30,
                       random_state=88)
Average Accuracy: 0.9333333333333333
Average Recall: 0.625
Average Confusion Matrix:
[[65.  2.]
 [ 3.  5.]]
------------------------------
Model: RandomForestClassifier(class_weight='balanced', n_estimators=20,
                       random_state=88)
Average Accuracy: 0.9333333333333333
Average Recall: 0.625
Average Confusion Matrix:
[[65.  2.]
 [ 3.  5.]]
------------------------------
Model: RandomForestClassifier(class_weight='balanced', n_estimators=15,
                       random_state=88)
Average Accuracy: 0.9333333333333333
Average Recall: 0.625
Average Confusion Matrix:
[[65.  2.]
 [ 3.  5.]]
------------------------------
Model: SVC(class_weight='balanced', probability=True, random_state=88)
Average Accuracy: 0.9733333333333334
Average Recall: 0.75
Average Confusion Matrix:
[[67.  0.]
 [ 2.  6.]]
------------------------------
Model: GradientBoostingClassifier(n_estimators=20, random_state=88)
Average Accuracy: 0.9466666666666667
Average Recall: 0.5
Average Confusion Matrix:
[[67.  0.]
 [ 4.  4.]]
------------------------------
Model: GradientBoostingClassifier(n_estimators=15, random_state=88)
Average Accuracy: 0.9466666666666667
Average Recall: 0.5
Average Confusion Matrix:
[[67.  0.]
 [ 4.  4.]]
------------------------------
Model: MultinomialNB()
Average Accuracy: 0.9733333333333334
Average Recall: 0.875
Average Confusion Matrix:
[[66.  1.]
 [ 1.  7.]]
------------------------------
Model: KNeighborsClassifier()
Average Accuracy: 0.96
Average Recall: 0.625
Average Confusion Matrix:
[[67.  0.]
 [ 3.  5.]]
------------------------------
Output generated on: 2025-04-27 14:41:25
Fold 1:
Model: LogisticRegression(max_iter=1000, random_state=88)
Train Accuracy Score: 0.9766666666666667
Train Recall Score: 0.7931034482758621
Train Confusion Matrix:
[[270   1]
 [  6  23]]

Test Accuracy Score: 0.9733333333333334
Test Recall Score: 0.75
Test Confusion Matrix:
[[67  0]
 [ 2  6]]
------------------------------
Model: RandomForestClassifier(class_weight='balanced', n_estimators=80,
                       random_state=88)
Train Accuracy Score: 0.9866666666666667
Train Recall Score: 1.0
Train Confusion Matrix:
[[267   4]
 [  0  29]]

Test Accuracy Score: 0.9333333333333333
Test Recall Score: 0.875
Test Confusion Matrix:
[[63  4]
 [ 1  7]]
------------------------------
Model: RandomForestClassifier(class_weight='balanced', n_estimators=50,
                       random_state=88)
Train Accuracy Score: 0.99
Train Recall Score: 0.9655172413793104
Train Confusion Matrix:
[[269   2]
 [  1  28]]

Test Accuracy Score: 0.9733333333333334
Test Recall Score: 0.875
Test Confusion Matrix:
[[66  1]
 [ 1  7]]
------------------------------
Model: RandomForestClassifier(class_weight='balanced', n_estimators=30,
                       random_state=88)
Train Accuracy Score: 0.99
Train Recall Score: 0.9655172413793104
Train Confusion Matrix:
[[269   2]
 [  1  28]]

Test Accuracy Score: 0.9733333333333334
Test Recall Score: 0.875
Test Confusion Matrix:
[[66  1]
 [ 1  7]]
------------------------------
Model: RandomForestClassifier(class_weight='balanced', n_estimators=20,
                       random_state=88)
Train Accuracy Score: 0.99
Train Recall Score: 0.9655172413793104
Train Confusion Matrix:
[[269   2]
 [  1  28]]

Test Accuracy Score: 0.9733333333333334
Test Recall Score: 0.875
Test Confusion Matrix:
[[66  1]
 [ 1  7]]
------------------------------
Model: RandomForestClassifier(class_weight='balanced', n_estimators=15,
                       random_state=88)
Train Accuracy Score: 0.9866666666666667
Train Recall Score: 1.0
Train Confusion Matrix:
[[267   4]
 [  0  29]]

Test Accuracy Score: 0.9333333333333333
Test Recall Score: 0.875
Test Confusion Matrix:
[[63  4]
 [ 1  7]]
------------------------------
Model: SVC(class_weight='balanced', probability=True, random_state=88)
Train Accuracy Score: 0.97
Train Recall Score: 0.8620689655172413
Train Confusion Matrix:
[[266   5]
 [  4  25]]

Test Accuracy Score: 0.9866666666666667
Test Recall Score: 0.875
Test Confusion Matrix:
[[67  0]
 [ 1  7]]
------------------------------
Model: GradientBoostingClassifier(n_estimators=20, random_state=88)
Train Accuracy Score: 0.99
Train Recall Score: 0.896551724137931
Train Confusion Matrix:
[[271   0]
 [  3  26]]

Test Accuracy Score: 0.9733333333333334
Test Recall Score: 0.75
Test Confusion Matrix:
[[67  0]
 [ 2  6]]
------------------------------
Model: GradientBoostingClassifier(n_estimators=15, random_state=88)
Train Accuracy Score: 0.9866666666666667
Train Recall Score: 0.8620689655172413
Train Confusion Matrix:
[[271   0]
 [  4  25]]

Test Accuracy Score: 0.9733333333333334
Test Recall Score: 0.75
Test Confusion Matrix:
[[67  0]
 [ 2  6]]
------------------------------
Model: MultinomialNB()
Train Accuracy Score: 0.96
Train Recall Score: 0.8275862068965517
Train Confusion Matrix:
[[264   7]
 [  5  24]]

Test Accuracy Score: 0.9866666666666667
Test Recall Score: 0.875
Test Confusion Matrix:
[[67  0]
 [ 1  7]]
------------------------------
Model: KNeighborsClassifier()
Train Accuracy Score: 0.97
Train Recall Score: 0.7241379310344828
Train Confusion Matrix:
[[270   1]
 [  8  21]]

Test Accuracy Score: 0.9733333333333334
Test Recall Score: 0.75
Test Confusion Matrix:
[[67  0]
 [ 2  6]]
------------------------------
NEXT FOLD 


Summary of Models Test results (Average Metrics):
Model: LogisticRegression(max_iter=1000, random_state=88)
Average Accuracy: 0.9733333333333334
Average Recall: 0.75
Average Confusion Matrix:
[[67.  0.]
 [ 2.  6.]]
------------------------------
Model: RandomForestClassifier(class_weight='balanced', n_estimators=80,
                       random_state=88)
Average Accuracy: 0.9333333333333333
Average Recall: 0.75
Average Confusion Matrix:
[[64.  3.]
 [ 2.  6.]]
------------------------------
Model: RandomForestClassifier(class_weight='balanced', n_estimators=50,
                       random_state=88)
Average Accuracy: 0.9533333333333334
Average Recall: 0.75
Average Confusion Matrix:
[[65.5  1.5]
 [ 2.   6. ]]
------------------------------
Model: RandomForestClassifier(class_weight='balanced', n_estimators=30,
                       random_state=88)
Average Accuracy: 0.9533333333333334
Average Recall: 0.75
Average Confusion Matrix:
[[65.5  1.5]
 [ 2.   6. ]]
------------------------------
Model: RandomForestClassifier(class_weight='balanced', n_estimators=20,
                       random_state=88)
Average Accuracy: 0.9533333333333334
Average Recall: 0.75
Average Confusion Matrix:
[[65.5  1.5]
 [ 2.   6. ]]
------------------------------
Model: RandomForestClassifier(class_weight='balanced', n_estimators=15,
                       random_state=88)
Average Accuracy: 0.9333333333333333
Average Recall: 0.75
Average Confusion Matrix:
[[64.  3.]
 [ 2.  6.]]
------------------------------
Model: SVC(class_weight='balanced', probability=True, random_state=88)
Average Accuracy: 0.98
Average Recall: 0.8125
Average Confusion Matrix:
[[67.   0. ]
 [ 1.5  6.5]]
------------------------------
Model: GradientBoostingClassifier(n_estimators=20, random_state=88)
Average Accuracy: 0.96
Average Recall: 0.625
Average Confusion Matrix:
[[67.  0.]
 [ 3.  5.]]
------------------------------
Model: GradientBoostingClassifier(n_estimators=15, random_state=88)
Average Accuracy: 0.96
Average Recall: 0.625
Average Confusion Matrix:
[[67.  0.]
 [ 3.  5.]]
------------------------------
Model: MultinomialNB()
Average Accuracy: 0.98
Average Recall: 0.875
Average Confusion Matrix:
[[66.5  0.5]
 [ 1.   7. ]]
------------------------------
Model: KNeighborsClassifier()
Average Accuracy: 0.9666666666666667
Average Recall: 0.6875
Average Confusion Matrix:
[[67.   0. ]
 [ 2.5  5.5]]
------------------------------
Output generated on: 2025-04-27 14:41:26
Fold 2:
Model: LogisticRegression(max_iter=1000, random_state=88)
Train Accuracy Score: 0.98
Train Recall Score: 0.8333333333333334
Train Confusion Matrix:
[[269   1]
 [  5  25]]

Test Accuracy Score: 0.9733333333333334
Test Recall Score: 0.7142857142857143
Test Confusion Matrix:
[[68  0]
 [ 2  5]]
------------------------------
Model: RandomForestClassifier(class_weight='balanced', n_estimators=80,
                       random_state=88)
Train Accuracy Score: 0.9866666666666667
Train Recall Score: 1.0
Train Confusion Matrix:
[[266   4]
 [  0  30]]

Test Accuracy Score: 0.92
Test Recall Score: 0.8571428571428571
Test Confusion Matrix:
[[63  5]
 [ 1  6]]
------------------------------
Model: RandomForestClassifier(class_weight='balanced', n_estimators=50,
                       random_state=88)
Train Accuracy Score: 0.99
Train Recall Score: 0.9666666666666667
Train Confusion Matrix:
[[268   2]
 [  1  29]]

Test Accuracy Score: 0.9333333333333333
Test Recall Score: 0.8571428571428571
Test Confusion Matrix:
[[64  4]
 [ 1  6]]
------------------------------
Model: RandomForestClassifier(class_weight='balanced', n_estimators=30,
                       random_state=88)
Train Accuracy Score: 0.99
Train Recall Score: 0.9666666666666667
Train Confusion Matrix:
[[268   2]
 [  1  29]]

Test Accuracy Score: 0.9466666666666667
Test Recall Score: 0.8571428571428571
Test Confusion Matrix:
[[65  3]
 [ 1  6]]
------------------------------
Model: RandomForestClassifier(class_weight='balanced', n_estimators=20,
                       random_state=88)
Train Accuracy Score: 0.99
Train Recall Score: 0.9666666666666667
Train Confusion Matrix:
[[268   2]
 [  1  29]]

Test Accuracy Score: 0.9466666666666667
Test Recall Score: 0.8571428571428571
Test Confusion Matrix:
[[65  3]
 [ 1  6]]
------------------------------
Model: RandomForestClassifier(class_weight='balanced', n_estimators=15,
                       random_state=88)
Train Accuracy Score: 0.99
Train Recall Score: 0.9666666666666667
Train Confusion Matrix:
[[268   2]
 [  1  29]]

Test Accuracy Score: 0.9333333333333333
Test Recall Score: 0.8571428571428571
Test Confusion Matrix:
[[64  4]
 [ 1  6]]
------------------------------
Model: SVC(class_weight='balanced', probability=True, random_state=88)
Train Accuracy Score: 0.9766666666666667
Train Recall Score: 0.8666666666666667
Train Confusion Matrix:
[[267   3]
 [  4  26]]

Test Accuracy Score: 0.96
Test Recall Score: 0.8571428571428571
Test Confusion Matrix:
[[66  2]
 [ 1  6]]
------------------------------
Model: GradientBoostingClassifier(n_estimators=20, random_state=88)
Train Accuracy Score: 0.99
Train Recall Score: 0.9
Train Confusion Matrix:
[[270   0]
 [  3  27]]

Test Accuracy Score: 0.96
Test Recall Score: 0.7142857142857143
Test Confusion Matrix:
[[67  1]
 [ 2  5]]
------------------------------
Model: GradientBoostingClassifier(n_estimators=15, random_state=88)
Train Accuracy Score: 0.9866666666666667
Train Recall Score: 0.8666666666666667
Train Confusion Matrix:
[[270   0]
 [  4  26]]

Test Accuracy Score: 0.96
Test Recall Score: 0.7142857142857143
Test Confusion Matrix:
[[67  1]
 [ 2  5]]
------------------------------
Model: MultinomialNB()
Train Accuracy Score: 0.97
Train Recall Score: 0.8666666666666667
Train Confusion Matrix:
[[265   5]
 [  4  26]]

Test Accuracy Score: 0.96
Test Recall Score: 0.8571428571428571
Test Confusion Matrix:
[[66  2]
 [ 1  6]]
------------------------------
Model: KNeighborsClassifier()
Train Accuracy Score: 0.9733333333333334
Train Recall Score: 0.7666666666666667
Train Confusion Matrix:
[[269   1]
 [  7  23]]

Test Accuracy Score: 0.9866666666666667
Test Recall Score: 0.8571428571428571
Test Confusion Matrix:
[[68  0]
 [ 1  6]]
------------------------------
NEXT FOLD 


Summary of Models Test results (Average Metrics):
Model: LogisticRegression(max_iter=1000, random_state=88)
Average Accuracy: 0.9733333333333333
Average Recall: 0.7380952380952381
Average Confusion Matrix:
[[67.33333333  0.        ]
 [ 2.          5.66666667]]
------------------------------
Model: RandomForestClassifier(class_weight='balanced', n_estimators=80,
                       random_state=88)
Average Accuracy: 0.9288888888888889
Average Recall: 0.7857142857142857
Average Confusion Matrix:
[[63.66666667  3.66666667]
 [ 1.66666667  6.        ]]
------------------------------
Model: RandomForestClassifier(class_weight='balanced', n_estimators=50,
                       random_state=88)
Average Accuracy: 0.9466666666666667
Average Recall: 0.7857142857142857
Average Confusion Matrix:
[[65.          2.33333333]
 [ 1.66666667  6.        ]]
------------------------------
Model: RandomForestClassifier(class_weight='balanced', n_estimators=30,
                       random_state=88)
Average Accuracy: 0.9511111111111111
Average Recall: 0.7857142857142857
Average Confusion Matrix:
[[65.33333333  2.        ]
 [ 1.66666667  6.        ]]
------------------------------
Model: RandomForestClassifier(class_weight='balanced', n_estimators=20,
                       random_state=88)
Average Accuracy: 0.9511111111111111
Average Recall: 0.7857142857142857
Average Confusion Matrix:
[[65.33333333  2.        ]
 [ 1.66666667  6.        ]]
------------------------------
Model: RandomForestClassifier(class_weight='balanced', n_estimators=15,
                       random_state=88)
Average Accuracy: 0.9333333333333332
Average Recall: 0.7857142857142857
Average Confusion Matrix:
[[64.          3.33333333]
 [ 1.66666667  6.        ]]
------------------------------
Model: SVC(class_weight='balanced', probability=True, random_state=88)
Average Accuracy: 0.9733333333333333
Average Recall: 0.8273809523809524
Average Confusion Matrix:
[[66.66666667  0.66666667]
 [ 1.33333333  6.33333333]]
------------------------------
Model: GradientBoostingClassifier(n_estimators=20, random_state=88)
Average Accuracy: 0.96
Average Recall: 0.6547619047619048
Average Confusion Matrix:
[[67.          0.33333333]
 [ 2.66666667  5.        ]]
------------------------------
Model: GradientBoostingClassifier(n_estimators=15, random_state=88)
Average Accuracy: 0.96
Average Recall: 0.6547619047619048
Average Confusion Matrix:
[[67.          0.33333333]
 [ 2.66666667  5.        ]]
------------------------------
Model: MultinomialNB()
Average Accuracy: 0.9733333333333333
Average Recall: 0.8690476190476191
Average Confusion Matrix:
[[66.33333333  1.        ]
 [ 1.          6.66666667]]
------------------------------
Model: KNeighborsClassifier()
Average Accuracy: 0.9733333333333333
Average Recall: 0.7440476190476191
Average Confusion Matrix:
[[67.33333333  0.        ]
 [ 2.          5.66666667]]
------------------------------
Output generated on: 2025-04-27 14:41:26
Fold 3:
Model: LogisticRegression(max_iter=1000, random_state=88)
Train Accuracy Score: 0.98
Train Recall Score: 0.8
Train Confusion Matrix:
[[270   0]
 [  6  24]]

Test Accuracy Score: 0.9466666666666667
Test Recall Score: 0.8571428571428571
Test Confusion Matrix:
[[65  3]
 [ 1  6]]
------------------------------
Model: RandomForestClassifier(class_weight='balanced', n_estimators=80,
                       random_state=88)
Train Accuracy Score: 0.99
Train Recall Score: 0.9666666666666667
Train Confusion Matrix:
[[268   2]
 [  1  29]]

Test Accuracy Score: 0.9466666666666667
Test Recall Score: 0.8571428571428571
Test Confusion Matrix:
[[65  3]
 [ 1  6]]
------------------------------
Model: RandomForestClassifier(class_weight='balanced', n_estimators=50,
                       random_state=88)
Train Accuracy Score: 0.99
Train Recall Score: 0.9666666666666667
Train Confusion Matrix:
[[268   2]
 [  1  29]]

Test Accuracy Score: 0.9466666666666667
Test Recall Score: 0.8571428571428571
Test Confusion Matrix:
[[65  3]
 [ 1  6]]
------------------------------
Model: RandomForestClassifier(class_weight='balanced', n_estimators=30,
                       random_state=88)
Train Accuracy Score: 0.99
Train Recall Score: 0.9666666666666667
Train Confusion Matrix:
[[268   2]
 [  1  29]]

Test Accuracy Score: 0.9466666666666667
Test Recall Score: 0.8571428571428571
Test Confusion Matrix:
[[65  3]
 [ 1  6]]
------------------------------
Model: RandomForestClassifier(class_weight='balanced', n_estimators=20,
                       random_state=88)
Train Accuracy Score: 0.99
Train Recall Score: 0.9666666666666667
Train Confusion Matrix:
[[268   2]
 [  1  29]]

Test Accuracy Score: 0.9466666666666667
Test Recall Score: 0.8571428571428571
Test Confusion Matrix:
[[65  3]
 [ 1  6]]
------------------------------
Model: RandomForestClassifier(class_weight='balanced', n_estimators=15,
                       random_state=88)
Train Accuracy Score: 0.99
Train Recall Score: 0.9666666666666667
Train Confusion Matrix:
[[268   2]
 [  1  29]]

Test Accuracy Score: 0.96
Test Recall Score: 1.0
Test Confusion Matrix:
[[65  3]
 [ 0  7]]
------------------------------
Model: SVC(class_weight='balanced', probability=True, random_state=88)
Train Accuracy Score: 0.9766666666666667
Train Recall Score: 0.8333333333333334
Train Confusion Matrix:
[[268   2]
 [  5  25]]

Test Accuracy Score: 0.92
Test Recall Score: 0.8571428571428571
Test Confusion Matrix:
[[63  5]
 [ 1  6]]
------------------------------
Model: GradientBoostingClassifier(n_estimators=20, random_state=88)
Train Accuracy Score: 0.9866666666666667
Train Recall Score: 0.8666666666666667
Train Confusion Matrix:
[[270   0]
 [  4  26]]

Test Accuracy Score: 0.96
Test Recall Score: 1.0
Test Confusion Matrix:
[[65  3]
 [ 0  7]]
------------------------------
Model: GradientBoostingClassifier(n_estimators=15, random_state=88)
Train Accuracy Score: 0.9866666666666667
Train Recall Score: 0.8666666666666667
Train Confusion Matrix:
[[270   0]
 [  4  26]]

Test Accuracy Score: 0.9866666666666667
Test Recall Score: 1.0
Test Confusion Matrix:
[[67  1]
 [ 0  7]]
------------------------------
Model: MultinomialNB()
Train Accuracy Score: 0.9633333333333334
Train Recall Score: 0.8333333333333334
Train Confusion Matrix:
[[264   6]
 [  5  25]]

Test Accuracy Score: 0.9333333333333333
Test Recall Score: 1.0
Test Confusion Matrix:
[[63  5]
 [ 0  7]]
------------------------------
Model: KNeighborsClassifier()
Train Accuracy Score: 0.9733333333333334
Train Recall Score: 0.7333333333333333
Train Confusion Matrix:
[[270   0]
 [  8  22]]

Test Accuracy Score: 0.96
Test Recall Score: 0.7142857142857143
Test Confusion Matrix:
[[67  1]
 [ 2  5]]
------------------------------
NEXT FOLD 


Summary of Models Test results (Average Metrics):
Model: LogisticRegression(max_iter=1000, random_state=88)
Average Accuracy: 0.9666666666666667
Average Recall: 0.7678571428571428
Average Confusion Matrix:
[[66.75  0.75]
 [ 1.75  5.75]]
------------------------------
Model: RandomForestClassifier(class_weight='balanced', n_estimators=80,
                       random_state=88)
Average Accuracy: 0.9333333333333333
Average Recall: 0.8035714285714286
Average Confusion Matrix:
[[64.   3.5]
 [ 1.5  6. ]]
------------------------------
Model: RandomForestClassifier(class_weight='balanced', n_estimators=50,
                       random_state=88)
Average Accuracy: 0.9466666666666667
Average Recall: 0.8035714285714286
Average Confusion Matrix:
[[65.   2.5]
 [ 1.5  6. ]]
------------------------------
Model: RandomForestClassifier(class_weight='balanced', n_estimators=30,
                       random_state=88)
Average Accuracy: 0.95
Average Recall: 0.8035714285714286
Average Confusion Matrix:
[[65.25  2.25]
 [ 1.5   6.  ]]
------------------------------
Model: RandomForestClassifier(class_weight='balanced', n_estimators=20,
                       random_state=88)
Average Accuracy: 0.95
Average Recall: 0.8035714285714286
Average Confusion Matrix:
[[65.25  2.25]
 [ 1.5   6.  ]]
------------------------------
Model: RandomForestClassifier(class_weight='balanced', n_estimators=15,
                       random_state=88)
Average Accuracy: 0.94
Average Recall: 0.8392857142857143
Average Confusion Matrix:
[[64.25  3.25]
 [ 1.25  6.25]]
------------------------------
Model: SVC(class_weight='balanced', probability=True, random_state=88)
Average Accuracy: 0.96
Average Recall: 0.8348214285714286
Average Confusion Matrix:
[[65.75  1.75]
 [ 1.25  6.25]]
------------------------------
Model: GradientBoostingClassifier(n_estimators=20, random_state=88)
Average Accuracy: 0.96
Average Recall: 0.7410714285714286
Average Confusion Matrix:
[[66.5  1. ]
 [ 2.   5.5]]
------------------------------
Model: GradientBoostingClassifier(n_estimators=15, random_state=88)
Average Accuracy: 0.9666666666666667
Average Recall: 0.7410714285714286
Average Confusion Matrix:
[[67.   0.5]
 [ 2.   5.5]]
------------------------------
Model: MultinomialNB()
Average Accuracy: 0.9633333333333334
Average Recall: 0.9017857142857143
Average Confusion Matrix:
[[65.5   2.  ]
 [ 0.75  6.75]]
------------------------------
Model: KNeighborsClassifier()
Average Accuracy: 0.97
Average Recall: 0.7366071428571428
Average Confusion Matrix:
[[67.25  0.25]
 [ 2.    5.5 ]]
------------------------------
Output generated on: 2025-04-27 14:41:26
Fold 4:
Model: LogisticRegression(max_iter=1000, random_state=88)
Train Accuracy Score: 0.98
Train Recall Score: 0.8333333333333334
Train Confusion Matrix:
[[269   1]
 [  5  25]]

Test Accuracy Score: 0.9733333333333334
Test Recall Score: 0.7142857142857143
Test Confusion Matrix:
[[68  0]
 [ 2  5]]
------------------------------
Model: RandomForestClassifier(class_weight='balanced', n_estimators=80,
                       random_state=88)
Train Accuracy Score: 0.9966666666666667
Train Recall Score: 1.0
Train Confusion Matrix:
[[269   1]
 [  0  30]]

Test Accuracy Score: 0.9733333333333334
Test Recall Score: 0.7142857142857143
Test Confusion Matrix:
[[68  0]
 [ 2  5]]
------------------------------
Model: RandomForestClassifier(class_weight='balanced', n_estimators=50,
                       random_state=88)
Train Accuracy Score: 0.9966666666666667
Train Recall Score: 1.0
Train Confusion Matrix:
[[269   1]
 [  0  30]]

Test Accuracy Score: 0.9733333333333334
Test Recall Score: 0.7142857142857143
Test Confusion Matrix:
[[68  0]
 [ 2  5]]
------------------------------
Model: RandomForestClassifier(class_weight='balanced', n_estimators=30,
                       random_state=88)
Train Accuracy Score: 0.9933333333333333
Train Recall Score: 1.0
Train Confusion Matrix:
[[268   2]
 [  0  30]]

Test Accuracy Score: 0.9733333333333334
Test Recall Score: 0.7142857142857143
Test Confusion Matrix:
[[68  0]
 [ 2  5]]
------------------------------
Model: RandomForestClassifier(class_weight='balanced', n_estimators=20,
                       random_state=88)
Train Accuracy Score: 0.9933333333333333
Train Recall Score: 1.0
Train Confusion Matrix:
[[268   2]
 [  0  30]]

Test Accuracy Score: 0.9733333333333334
Test Recall Score: 0.7142857142857143
Test Confusion Matrix:
[[68  0]
 [ 2  5]]
------------------------------
Model: RandomForestClassifier(class_weight='balanced', n_estimators=15,
                       random_state=88)
Train Accuracy Score: 0.9933333333333333
Train Recall Score: 1.0
Train Confusion Matrix:
[[268   2]
 [  0  30]]

Test Accuracy Score: 0.9733333333333334
Test Recall Score: 0.7142857142857143
Test Confusion Matrix:
[[68  0]
 [ 2  5]]
------------------------------
Model: SVC(class_weight='balanced', probability=True, random_state=88)
Train Accuracy Score: 0.9766666666666667
Train Recall Score: 0.9
Train Confusion Matrix:
[[266   4]
 [  3  27]]

Test Accuracy Score: 0.96
Test Recall Score: 0.7142857142857143
Test Confusion Matrix:
[[67  1]
 [ 2  5]]
------------------------------
Model: GradientBoostingClassifier(n_estimators=20, random_state=88)
Train Accuracy Score: 0.9933333333333333
Train Recall Score: 0.9333333333333333
Train Confusion Matrix:
[[270   0]
 [  2  28]]

Test Accuracy Score: 0.9466666666666667
Test Recall Score: 0.5714285714285714
Test Confusion Matrix:
[[67  1]
 [ 3  4]]
------------------------------
Model: GradientBoostingClassifier(n_estimators=15, random_state=88)
Train Accuracy Score: 0.9933333333333333
Train Recall Score: 0.9333333333333333
Train Confusion Matrix:
[[270   0]
 [  2  28]]

Test Accuracy Score: 0.96
Test Recall Score: 0.7142857142857143
Test Confusion Matrix:
[[67  1]
 [ 2  5]]
------------------------------
Model: MultinomialNB()
Train Accuracy Score: 0.97
Train Recall Score: 0.8666666666666667
Train Confusion Matrix:
[[265   5]
 [  4  26]]

Test Accuracy Score: 0.9333333333333333
Test Recall Score: 0.7142857142857143
Test Confusion Matrix:
[[65  3]
 [ 2  5]]
------------------------------
Model: KNeighborsClassifier()
Train Accuracy Score: 0.9766666666666667
Train Recall Score: 0.8
Train Confusion Matrix:
[[269   1]
 [  6  24]]

Test Accuracy Score: 0.9733333333333334
Test Recall Score: 0.7142857142857143
Test Confusion Matrix:
[[68  0]
 [ 2  5]]
------------------------------
NEXT FOLD 


Summary of Models Test results (Average Metrics):
Model: LogisticRegression(max_iter=1000, random_state=88)
Average Accuracy: 0.968
Average Recall: 0.7571428571428571
Average Confusion Matrix:
[[67.   0.6]
 [ 1.8  5.6]]
------------------------------
Model: RandomForestClassifier(class_weight='balanced', n_estimators=80,
                       random_state=88)
Average Accuracy: 0.9413333333333334
Average Recall: 0.7857142857142857
Average Confusion Matrix:
[[64.8  2.8]
 [ 1.6  5.8]]
------------------------------
Model: RandomForestClassifier(class_weight='balanced', n_estimators=50,
                       random_state=88)
Average Accuracy: 0.952
Average Recall: 0.7857142857142857
Average Confusion Matrix:
[[65.6  2. ]
 [ 1.6  5.8]]
------------------------------
Model: RandomForestClassifier(class_weight='balanced', n_estimators=30,
                       random_state=88)
Average Accuracy: 0.9546666666666667
Average Recall: 0.7857142857142857
Average Confusion Matrix:
[[65.8  1.8]
 [ 1.6  5.8]]
------------------------------
Model: RandomForestClassifier(class_weight='balanced', n_estimators=20,
                       random_state=88)
Average Accuracy: 0.9546666666666667
Average Recall: 0.7857142857142857
Average Confusion Matrix:
[[65.8  1.8]
 [ 1.6  5.8]]
------------------------------
Model: RandomForestClassifier(class_weight='balanced', n_estimators=15,
                       random_state=88)
Average Accuracy: 0.9466666666666667
Average Recall: 0.8142857142857143
Average Confusion Matrix:
[[65.   2.6]
 [ 1.4  6. ]]
------------------------------
Model: SVC(class_weight='balanced', probability=True, random_state=88)
Average Accuracy: 0.96
Average Recall: 0.8107142857142857
Average Confusion Matrix:
[[66.   1.6]
 [ 1.4  6. ]]
------------------------------
Model: GradientBoostingClassifier(n_estimators=20, random_state=88)
Average Accuracy: 0.9573333333333334
Average Recall: 0.7071428571428571
Average Confusion Matrix:
[[66.6  1. ]
 [ 2.2  5.2]]
------------------------------
Model: GradientBoostingClassifier(n_estimators=15, random_state=88)
Average Accuracy: 0.9653333333333333
Average Recall: 0.7357142857142858
Average Confusion Matrix:
[[67.   0.6]
 [ 2.   5.4]]
------------------------------
Model: MultinomialNB()
Average Accuracy: 0.9573333333333334
Average Recall: 0.8642857142857142
Average Confusion Matrix:
[[65.4  2.2]
 [ 1.   6.4]]
------------------------------
Model: KNeighborsClassifier()
Average Accuracy: 0.9706666666666667
Average Recall: 0.7321428571428571
Average Confusion Matrix:
[[67.4  0.2]
 [ 2.   5.4]]
------------------------------
